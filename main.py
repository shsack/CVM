import numpy as np
import os
import csv
from mpi4py import MPI
import multiprocessing as mp


def split_data(size, data):

    """Split the data on the MPI ranks"""

    n = len(data) // size
    return [data[i:i + n] for i in range(0, len(data), n)]


def run_exe(d):

    """Run the executable generated by the C++ file"""

    os.system("./cvm {} 0.1 10".format(d))


# MPI setup
comm = MPI.COMM_WORLD
rank = comm.Get_rank()  # Identification number of node
size = comm.Get_size()  # Number of nodes

# Data
omega = np.linspace(start=0., stop=3., num=16, dtype=float)
# eta = 0.1
# num_inter = 10


# Split the data in the zeroth node
if rank == 0:
    data_split = split_data(size, omega)
else:
    data_split = None

# Scatter data from zeroth node onto other nodes and do the calculation in each node
data_in_node = comm.scatter(data_split, root=0)

# Split running of exe in each rank on CPUs
p = mp.Pool(mp.cpu_count())
p.map(run_exe, data_in_node)

correlator = []

# Make sure that all ranks have finished
comm.gather(0, root=0)

if rank == 0:

    # Read data from files and delete the temporary files
    for om in omega:

        name = "data/cvm_{:.1f}.txt".format(om)
        f = open(name)
        correlator.append(float(f.readline()))
        f.close()
        os.remove(name)

    # Save data in file
    f = open('data/cvm_data.csv', 'w')
    out = csv.writer(f, delimiter=' ')
    out.writerows(zip(omega, correlator))
    f.close()
